import React, { useState, useRef, ChangeEvent } from 'react';
import { View, Text, Button, Image, StyleSheet, TouchableOpacity, ActivityIndicator } from 'react-native';
import { FirebaseStorageService } from '../services/firebase/FirebaseStorageService';

interface ImageUploaderProps {
  productId: string;
  category: string;
  onImageUploaded?: (url: string) => void;
  existingImage?: string;
}

const ImageUploader: React.FC<ImageUploaderProps> = ({
  productId,
  category,
  onImageUploaded,
  existingImage
}) => {
  const [uploading, setUploading] = useState(false);
  const [imageUrl, setImageUrl] = useState<string | null>(existingImage || null);
  const [error, setError] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = async (event: ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    const file = files[0];
    
    // Validate file is an image
    if (!file.type.startsWith('image/')) {
      setError('Please select an image file');
      return;
    }

    try {
      setError(null);
      setUploading(true);
      
      const storageService = FirebaseStorageService.getInstance();
      const result = await storageService.uploadProductImage(
        productId,
        file,
        category,
        `${productId}-${Date.now()}-${file.name}`
      );
      
      setImageUrl(result.url);
      if (onImageUploaded) {
        onImageUploaded(result.url);
      }
    } catch (err) {
      console.error('Error uploading image:', err);
      setError('Failed to upload image. Please try again.');
    } finally {
      setUploading(false);
    }
  };

  const triggerFileInput = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <View style={styles.container}>
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept="image/*"
        style={{ display: 'none' }}
      />
      
      {imageUrl ? (
        <View style={styles.imageContainer}>
          <Image 
            source={{ uri: imageUrl }} 
            style={styles.image} 
            resizeMode="cover"
          />
          <TouchableOpacity 
            style={styles.changeButton}
            onPress={triggerFileInput}
            disabled={uploading}
          >
            <Text style={styles.changeButtonText}>Change Image</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <TouchableOpacity 
          style={styles.uploadButton} 
          onPress={triggerFileInput}
          disabled={uploading}
        >
          {uploading ? (
            <ActivityIndicator color="#ffffff" />
          ) : (
            <Text style={styles.uploadButtonText}>Upload Image</Text>
          )}
        </TouchableOpacity>
      )}
      
      {error && <Text style={styles.errorText}>{error}</Text>}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
    alignItems: 'center',
  },
  uploadButton: {
    backgroundColor: '#2196F3',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    width: 200,
    height: 120,
  },
  uploadButtonText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
  imageContainer: {
    width: 200,
    height: 200,
    position: 'relative',
  },
  image: {
    width: '100%',
    height: '100%',
    borderRadius: 8,
  },
  changeButton: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    padding: 8,
    alignItems: 'center',
  },
  changeButtonText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
  errorText: {
    color: 'red',
    marginTop: 8,
  },
});

module.exports = ImageUploader; 