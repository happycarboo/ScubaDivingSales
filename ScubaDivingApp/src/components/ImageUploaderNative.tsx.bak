import React, { useState } from 'react';
import { View, Text, Image, StyleSheet, TouchableOpacity, ActivityIndicator, Platform, Alert } from 'react-native';
import { FirebaseStorageService } from '../services/firebase/FirebaseStorageService';

// Note: You need to install this package for mobile use
// npm install react-native-document-picker
// This import will cause errors until you install the package
// import DocumentPicker from 'react-native-document-picker';

interface ImageUploaderNativeProps {
  productId: string;
  category: string;
  onImageUploaded?: (url: string) => void;
  existingImage?: string;
}

/**
 * Native-friendly version of ImageUploader for React Native mobile apps
 * To use this component, first install react-native-document-picker:
 * npm install react-native-document-picker
 */
const ImageUploaderNative: React.FC<ImageUploaderNativeProps> = ({
  productId,
  category,
  onImageUploaded,
  existingImage
}) => {
  const [uploading, setUploading] = useState(false);
  const [imageUrl, setImageUrl] = useState<string | null>(existingImage || null);
  const [error, setError] = useState<string | null>(null);

  const pickAndUploadImage = async () => {
    try {
      // This code is commented out because it requires react-native-document-picker
      // Uncomment and use after installing the package
      /*
      const result = await DocumentPicker.pick({
        type: [DocumentPicker.types.images],
      });
      
      setError(null);
      setUploading(true);
      
      // Create a file blob from the selected file
      const response = await fetch(result[0].uri);
      const blob = await response.blob();
      
      const storageService = FirebaseStorageService.getInstance();
      const uploadResult = await storageService.uploadProductImage(
        productId,
        blob,
        category,
        `${productId}-${Date.now()}.jpg`
      );
      
      setImageUrl(uploadResult.url);
      if (onImageUploaded) {
        onImageUploaded(uploadResult.url);
      }
      */
      
      // For now, show an alert that this feature requires additional setup
      Alert.alert(
        "Setup Required",
        "To use this feature, install react-native-document-picker and uncomment the code in ImageUploaderNative.tsx",
        [{ text: "OK" }]
      );
    } catch (err) {
      console.error('Error picking/uploading image:', err);
      setError('Failed to upload image. Please try again.');
    } finally {
      setUploading(false);
    }
  };

  return (
    <View style={styles.container}>
      {imageUrl ? (
        <View style={styles.imageContainer}>
          <Image 
            source={{ uri: imageUrl }} 
            style={styles.image} 
            resizeMode="cover"
          />
          <TouchableOpacity 
            style={styles.changeButton}
            onPress={pickAndUploadImage}
            disabled={uploading}
          >
            <Text style={styles.changeButtonText}>Change Image</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <TouchableOpacity 
          style={styles.uploadButton} 
          onPress={pickAndUploadImage}
          disabled={uploading}
        >
          {uploading ? (
            <ActivityIndicator color="#ffffff" />
          ) : (
            <Text style={styles.uploadButtonText}>Upload Image</Text>
          )}
        </TouchableOpacity>
      )}
      
      {error && <Text style={styles.errorText}>{error}</Text>}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
    alignItems: 'center',
  },
  uploadButton: {
    backgroundColor: '#2196F3',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    width: 200,
    height: 120,
  },
  uploadButtonText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
  imageContainer: {
    width: 200,
    height: 200,
    position: 'relative',
  },
  image: {
    width: '100%',
    height: '100%',
    borderRadius: 8,
  },
  changeButton: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    padding: 8,
    alignItems: 'center',
  },
  changeButtonText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
  errorText: {
    color: 'red',
    marginTop: 8,
  },
});

module.exports = ImageUploaderNative; 